version: '3.8'

networks:
  app_network:  # ✅ 让所有容器共享同一个网络
    driver: bridge

services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: social_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:  # ✅ 确保 PostgreSQL 可用
      test: ["CMD-SHELL", "pg_isready -U admin -d social_platform"]
      interval: 10s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka_broker
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_DIRS: /kafka/logs
    depends_on:
      - zookeeper
    networks:
      - app_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.2.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data:rw  # ✅ 确保写权限
    networks:
      - app_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.2.0
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: api_gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx-config:/etc/nginx/
    depends_on:
      user-service:
        condition: service_healthy  # ✅ 确保 `user-service` 运行后才启动
    networks:
      - app_network

  user-service:
    build: ./user-service
    container_name: user-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/social_platform
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect  # ✅ 防止 Hibernate 连接错误
    depends_on:
      postgres:
        condition: service_healthy  # ✅ 确保 `postgres` 可用
      redis:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - app_network
    healthcheck:  # ✅ 确保 `user-service` 启动成功
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      retries: 5

volumes:
  postgres_data:
  elastic_data:
